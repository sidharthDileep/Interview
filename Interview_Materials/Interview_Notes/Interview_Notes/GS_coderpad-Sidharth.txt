/* Problem Name is &&& Best Average Grade &&& PLEASE DO NOT REMOVE THIS LINE. */


/*
 **  Instructions:
 **
 **  Given a list of student test scores, find the best average grade.
 **  Each student may have more than one test score in the list.
 **
 **  Complete the bestAverageGrade function in the editor below.
 **  It has one parameter, scores, which is an array of student test scores.
 **  Each element in the array is a two-element array of the form [student name, test score]
 **  e.g. [ "Bobby", "87" ].
 **  Test scores may be positive or negative integers.
 **
 **  If you end up with an average grade that is not an integer, you should
 **  use a floor function to return the largest integer less than or equal to the average.
 **  Return 0 for an empty input.
 **
 **  Example:
 **
 **  Input:
 **  [["Bobby", "87"],
 **   ["Charles", "100"],
 **   ["Eric", "64"],
 **   ["Charles", "22"]].
 **
 **  Expected output: 87
 **  Explanation: The average scores are 87, 61, and 64 for Bobby, Charles, and Eric,
 **  respectively. 87 is the highest.
 */

import java.util.*; 

import java.math.*;

class Solution {
  /*
   **  Find the best average grade.
   */
  public static int bestAverageGrade(String[][] scores) {
    // TODO: implement this function

    Map<String, Integer> total = new HashMap<>();
    Map<String, Integer> frequency = new HashMap<>();

    for(int i=0; i<scores.length; i++){
        if(total.get(scores[i][0]) == null){
            total.put(scores[i][0], Integer.valueOf(scores[i][1]));
        } else {
            total.put(scores[i][0], total.get(scores[i][0]) + Integer.valueOf(scores[i][1]));
        }
    }

    for(int j=0; j<scores.length; j++){
      if(frequency.get(scores[j][0]) == null){
          frequency.put(scores[j][0], 1);
      } else {
        frequency.put(scores[j][0], frequency.get(scores[j][0]) + 1);
      }
    }

    int maxAvg = Integer.MIN_VALUE;

    for(int k=0; k<scores.length; k++){
        if(total.get(scores[k][0])/frequency.get(scores[k][0]) > maxAvg ){
         maxAvg = (int)Math.floor(total.get(scores[k][0])/frequency.get(scores[k][0]));
        }
    }

      if(maxAvg == Integer.MIN_VALUE){
          return 0;
      } else {
      return maxAvg;
      }
    
  }

  /*
   **  Returns true if the tests pass. Otherwise, returns false;
   */
/*
   **  Returns true if the tests pass. Otherwise, returns false;
   */
  public static boolean doTestsPass() {
    // map of test cases to expected results
    var testCases = new HashMap<String[][], Integer>();

    // example
    testCases.put(new String[][] {
          {"Bobby", "87"},
          {"Charles", "100"},
          {"Eric", "64"},
          {"Charles", "22"}},
        87);
    // empty
    testCases.put(new String[][] {},
        0);
    // multiple scores each
    testCases.put(new String[][] {
          {"Sarah", "91"},
          {"Goldie", "92"},
          {"Elaine", "93"},
          {"Elaine", "95"},
          {"Goldie", "94"},
          {"Sarah", "93"}},
        94);
    // negatives and zeros
    testCases.put(new String[][] {
          {"Janie", "-66"},
          {"Janie", "0"},
          {"Gina", "-88"},
          {"Bobby", "0"},
          {"Gina", "44"},
          {"Bobby", "0"},
          {"Bobby", "-6"}},
        -2);
    // same value and average
    testCases.put(new String[][] {
          {"Alpha", "99"},
          {"Bravo", "99"},
          {"Charlie", "99"},
          {"Delta", "99"},
          {"Echo", "99"},
          {"Foxtrot", "99"},
          {"Foxtrot", "99"}},
        99);
    // non-integer average
    testCases.put(new String[][] {
          {"Gerald", "91"},
          {"Gerald", "92"}},
        91);
    // negative non-integer average
    testCases.put(new String[][] {
            {"Barry", "-66"},
            {"Barry", "-65"},
            {"Alfred", "-122"}},
        -66);
    // same student has two identical test scores and one that is different (this test case has proven especially beneficial for running average implementations)
    testCases.put(new String[][] {
          {"Bobby", "82"},
          {"Charles", "100"},
          {"Charles", "100"},
          {"Eric", "64"} ,
          {"Charles", "50"}},
        83);

    boolean passed = true;
    for (var entry: testCases.entrySet()) {
      int actual = bestAverageGrade(entry.getKey());
      if (actual != entry.getValue()) {
        passed = false;
        System.out.printf("Failed for %s\n  expected %s, actual %s" + actual, entry.getValue(), Arrays.deepToString(entry.getKey()), actual);
      }
    }

    return passed;
  }

  /*
   **  Execution entry point.
   */
  public static void main(String[] args) {
    // Run the tests
    if (doTestsPass()) {
      System.out.println("All tests pass");
    }
    else {
      System.out.println("Tests fail.");
    }
  }
}
