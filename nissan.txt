
  1, 5 ,9 ,11

List<Integer> numbers = new ArrayList<>(Arrays.asList(1, 5 , 8, 10);

List<Integer> oddNumbers = numbers.stream.map(n -> (n%2) !=0))
				  .collect(Collectors.toList());


for(int i=0; i<numbers.size(); i++){
if(numbers[i] % 2 == 0){
numbers[i]++;
}
}

id
name
dept
salary

2 hr
3 it
1 fin


f i h dept order asc
salary desc


class Employee{

private int id;
private String name;
private String dept;
private Long salary;


}

public static void main(String[] args){

Employee employeeOne = new Employee(1, "personOne", "HR", 10000);
Employee employeeTwo = new Employee(2, "personTwo", "HR", 20000);
Employee employeeThree = new Employee(3, "personThree", "IT", 30000);
Employee employeeFour = new Employee(4, "personFour", "IT", 40000);
Employee employeeFive = new Employee(5, "personFive", "FIN", 50000);
Employee employeeSix = new Employee(6, "personSix", "FIN", 60000);

List<Employee> employees = new Employees<>(6);

employees.add(employeeOne, employeeTwo, employeeThree, employeeFour, employeeFive, employeeSix);

List<Employee> employeesOrdered = new Employees<>(6);


employees.stream().
	 .sorted(e-> e.getDept() == "FIN")
	 .forEachRemaining(

----------------------------------------------------------------

/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
import java.util.*;

public class Main
{
	public static void main(String[] args) {
		System.out.println("Hello World");
		
		Employee employeeOne = new Employee(1, "personOne", "HR", 10000L);
        Employee employeeTwo = new Employee(2, "personTwo", "HR", 20000L);
        Employee employeeThree = new Employee(3, "personThree", "IT", 30000L);
        Employee employeeFour = new Employee(4, "personFour", "IT", 40000L);
        Employee employeeFive = new Employee(5, "personFive", "FIN", 50000L);
        Employee employeeSix = new Employee(6, "personSix", "FIN", 60000L);

        List<Employee> employees = new ArrayList<>();

        employees.add(employeeOne);
        
        
        /*String k[] = employees.toArray(new String[employees.size()]);
        
        for(String str : k){
            System.out.println(k);
        }
        */
        
        System.out.println(employees.get(0).getId());
        List<Employee> employeesOrdered = new ArrayList<>();


        //employees.stream().
	        //.sorted(e-> e.getDept() == "FIN");
	        //.forEachRemaining(
		
		
	}
}



class Employee{

private int id;
private String name;
private String dept;
private Long salary;

public Employee(int id, String name, String dept, Long salary){
    this.id = id;
    this.name = name;
    this.dept = dept;
    this.salary = salary;
}

public int getId(){
    return id;
}

public String getName(){
    return name;
}

public String getDept(){
    return dept;
}

public Long getSalary(){
    return salary;
}


public void setId(int id){
    this.id = id;
}

public void setName(){
    this.name = name;
}

public void setDept(){
   this.dept = dept;
}

public void setSalary(){
    this.salary = salary;
}


}

---------------------------------------------------
