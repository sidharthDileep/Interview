public final class ImmutableReminder{
    private final Date remindingDate;
 
    public ImmutableReminder (Date remindingDate) {
        if(remindingDate.getTime() < System.currentTimeMillis()){
            throw new IllegalArgumentException("Can not set reminder” +
                        “ for past time: " + remindingDate);
        }
	Date tempDate = remindingDate;
        this.remindingDate = new Date(tempDate.getTime());
	
    }
 
    public Date getRemindingDate() {
        return (Date) remindingDate.clone();
    }
}

String str = "Mango";

Map<String, Integer> map = new Map<>();

for(int i=0; i<str.length(); i++){
	map.put(str[i], map.getOrDefault(str[i], 0) + 1);
}

for(int k=0; k<str.length(); k++){
	if(map.get(str[k]) == 0){
		System.out.println(str[k]);
		break;
	}
}

Why spring IOC?

why singleton?


