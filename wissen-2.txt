Wissen-2
----------
97th
-----


Singleton? different cases?

/*Design a class such that only one instance of the class and any of its sub-classes can be created.
To clarify: Assume A is such a class and B and C are derived from A. 
B, C does not have any special code apart from extending A
new A(); // works fine.
new A(); // causes an exception
new B(); // works fine as this is the first instance of B
new B(); // causes an exception.
new C(); // works fine as this is the first instance of C
new C(); // causes an exception.*/

class A {

    private static Map<Class<? extends A>, A> instances = new HashMap<>();

    public A() {
        synchronized (A.class) {
            if (instances.containsKey(this.getClass())) {
                throw new IllegalStateException();
            }
            instances.put(getClass(), this);
        }
    }
    // code of class A
}

public class B extends A {

    public static void main(String[] args) {
        new A(); // works fine. 
        new A(); // causes an exception 
        new B(); // works fine as this is the first instance of B 
        new B(); // causes an exception.
    }
}



//Find kth element from the end in a Singly Linked List

// Simple Java program to find n'th node from end of linked list
class LinkedList {
	Node head; // head of the list

	/* Linked List node */
	class Node {
		int data;
		Node next;
		Node(int d)
		{
			data = d;
			next = null;
		}
	}

	/* Function to get the nth node from the last of a
	linked list */
	void printNthFromLast(int n)
	{
		int len = 0;
		Node temp = head;

		// 1) count the number of nodes in Linked List
		while (temp != null) {
			temp = temp.next;
			len++;
		}

		// check if value of n is not more than length of
		// the linked list
		if (len < n)
			return;

		temp = head;

		// 2) get the (len-n+1)th node from the beginning
		for (int i = 1; i < len - n + 1; i++)
			temp = temp.next;

		System.out.println(temp.data);
	}

	/* Inserts a new Node at front of the list. */
	public void push(int new_data)
	{
		/* 1 & 2: Allocate the Node &
				Put in the data*/
		Node new_node = new Node(new_data);

		/* 3. Make next of new Node as head */
		new_node.next = head;

		/* 4. Move the head to point to new Node */
		head = new_node;
	}

	/*Driver program to test above methods */
	public static void main(String[] args)
	{
		LinkedList llist = new LinkedList();
		llist.push(20);
		llist.push(4);
		llist.push(15);
		llist.push(35);

		llist.printNthFromLast(4);
	}
} // This code is contributed by Rajat Mishra
